// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: rpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamingVolumeSerivce_Attach_FullMethodName = "/StreamingVolumeSerivce/Attach"
	StreamingVolumeSerivce_Detach_FullMethodName = "/StreamingVolumeSerivce/Detach"
	StreamingVolumeSerivce_Remove_FullMethodName = "/StreamingVolumeSerivce/Remove"
	StreamingVolumeSerivce_Commit_FullMethodName = "/StreamingVolumeSerivce/Commit"
	StreamingVolumeSerivce_Push_FullMethodName   = "/StreamingVolumeSerivce/Push"
	StreamingVolumeSerivce_List_FullMethodName   = "/StreamingVolumeSerivce/List"
)

// StreamingVolumeSerivceClient is the client API for StreamingVolumeSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingVolumeSerivceClient interface {
	// create a volume and return a mountpoint
	Attach(ctx context.Context, in *AttachVolumeRequest, opts ...grpc.CallOption) (*AttachVolumeResponse, error)
	// detach a volume
	Detach(ctx context.Context, in *DetachVolumeRequest, opts ...grpc.CallOption) (*DetachVolumeResponse, error)
	// remove a volume or artifact and clear all data
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// commit a volume as a new artifact
	Commit(ctx context.Context, in *CommitImageRequest, opts ...grpc.CallOption) (*CommitImageResponse, error)
	// push a artifact to the target registry
	Push(ctx context.Context, in *PushImageRequest, opts ...grpc.CallOption) (*PushImageResponse, error)
	// list all active volumes
	List(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumeResponse, error)
}

type streamingVolumeSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingVolumeSerivceClient(cc grpc.ClientConnInterface) StreamingVolumeSerivceClient {
	return &streamingVolumeSerivceClient{cc}
}

func (c *streamingVolumeSerivceClient) Attach(ctx context.Context, in *AttachVolumeRequest, opts ...grpc.CallOption) (*AttachVolumeResponse, error) {
	out := new(AttachVolumeResponse)
	err := c.cc.Invoke(ctx, StreamingVolumeSerivce_Attach_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingVolumeSerivceClient) Detach(ctx context.Context, in *DetachVolumeRequest, opts ...grpc.CallOption) (*DetachVolumeResponse, error) {
	out := new(DetachVolumeResponse)
	err := c.cc.Invoke(ctx, StreamingVolumeSerivce_Detach_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingVolumeSerivceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, StreamingVolumeSerivce_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingVolumeSerivceClient) Commit(ctx context.Context, in *CommitImageRequest, opts ...grpc.CallOption) (*CommitImageResponse, error) {
	out := new(CommitImageResponse)
	err := c.cc.Invoke(ctx, StreamingVolumeSerivce_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingVolumeSerivceClient) Push(ctx context.Context, in *PushImageRequest, opts ...grpc.CallOption) (*PushImageResponse, error) {
	out := new(PushImageResponse)
	err := c.cc.Invoke(ctx, StreamingVolumeSerivce_Push_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingVolumeSerivceClient) List(ctx context.Context, in *ListVolumeRequest, opts ...grpc.CallOption) (*ListVolumeResponse, error) {
	out := new(ListVolumeResponse)
	err := c.cc.Invoke(ctx, StreamingVolumeSerivce_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamingVolumeSerivceServer is the server API for StreamingVolumeSerivce service.
// All implementations must embed UnimplementedStreamingVolumeSerivceServer
// for forward compatibility
type StreamingVolumeSerivceServer interface {
	// create a volume and return a mountpoint
	Attach(context.Context, *AttachVolumeRequest) (*AttachVolumeResponse, error)
	// detach a volume
	Detach(context.Context, *DetachVolumeRequest) (*DetachVolumeResponse, error)
	// remove a volume or artifact and clear all data
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	// commit a volume as a new artifact
	Commit(context.Context, *CommitImageRequest) (*CommitImageResponse, error)
	// push a artifact to the target registry
	Push(context.Context, *PushImageRequest) (*PushImageResponse, error)
	// list all active volumes
	List(context.Context, *ListVolumeRequest) (*ListVolumeResponse, error)
	mustEmbedUnimplementedStreamingVolumeSerivceServer()
}

// UnimplementedStreamingVolumeSerivceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingVolumeSerivceServer struct {
}

func (UnimplementedStreamingVolumeSerivceServer) Attach(context.Context, *AttachVolumeRequest) (*AttachVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (UnimplementedStreamingVolumeSerivceServer) Detach(context.Context, *DetachVolumeRequest) (*DetachVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detach not implemented")
}
func (UnimplementedStreamingVolumeSerivceServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedStreamingVolumeSerivceServer) Commit(context.Context, *CommitImageRequest) (*CommitImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedStreamingVolumeSerivceServer) Push(context.Context, *PushImageRequest) (*PushImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedStreamingVolumeSerivceServer) List(context.Context, *ListVolumeRequest) (*ListVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStreamingVolumeSerivceServer) mustEmbedUnimplementedStreamingVolumeSerivceServer() {
}

// UnsafeStreamingVolumeSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingVolumeSerivceServer will
// result in compilation errors.
type UnsafeStreamingVolumeSerivceServer interface {
	mustEmbedUnimplementedStreamingVolumeSerivceServer()
}

func RegisterStreamingVolumeSerivceServer(s grpc.ServiceRegistrar, srv StreamingVolumeSerivceServer) {
	s.RegisterService(&StreamingVolumeSerivce_ServiceDesc, srv)
}

func _StreamingVolumeSerivce_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingVolumeSerivceServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingVolumeSerivce_Attach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingVolumeSerivceServer).Attach(ctx, req.(*AttachVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingVolumeSerivce_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingVolumeSerivceServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingVolumeSerivce_Detach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingVolumeSerivceServer).Detach(ctx, req.(*DetachVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingVolumeSerivce_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingVolumeSerivceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingVolumeSerivce_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingVolumeSerivceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingVolumeSerivce_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingVolumeSerivceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingVolumeSerivce_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingVolumeSerivceServer).Commit(ctx, req.(*CommitImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingVolumeSerivce_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingVolumeSerivceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingVolumeSerivce_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingVolumeSerivceServer).Push(ctx, req.(*PushImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingVolumeSerivce_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingVolumeSerivceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamingVolumeSerivce_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingVolumeSerivceServer).List(ctx, req.(*ListVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamingVolumeSerivce_ServiceDesc is the grpc.ServiceDesc for StreamingVolumeSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingVolumeSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamingVolumeSerivce",
	HandlerType: (*StreamingVolumeSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _StreamingVolumeSerivce_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _StreamingVolumeSerivce_Detach_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _StreamingVolumeSerivce_Remove_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _StreamingVolumeSerivce_Commit_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _StreamingVolumeSerivce_Push_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StreamingVolumeSerivce_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
